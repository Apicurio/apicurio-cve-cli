package get

import (
	"encoding/json"
	"fmt"
	"github.com/SafarMirek/apicurio-cve-helper/pkg/config"
	"os"

	"github.com/SafarMirek/apicurio-cve-helper/pkg/acveh"
	"github.com/SafarMirek/apicurio-cve-helper/pkg/acveh/sbom"
	"github.com/spf13/cobra"
)

type GetOptions struct {
	SBom   string
	json   bool
	html   bool
	config *config.AcvehConfiguration
}

func NewGetCommand(config *config.AcvehConfiguration) *cobra.Command {
	opts := &GetOptions{
		config: config,
	}

	cmd := &cobra.Command{
		Use:     "get",
		Short:   "Get cve issues from jira",
		Long:    "",
		Example: "",
		Args:    cobra.NoArgs,
		RunE: func(cmd *cobra.Command, args []string) error {
			return runGet(opts)
		},
	}

	cmd.Flags().StringVar(&opts.SBom, "sbom", "", "SBom file")
	cmd.Flags().BoolVar(&opts.json, "json", false, "JSON output format")
	cmd.Flags().BoolVar(&opts.html, "html", false, "HTML output format")
	cmd.MarkFlagsMutuallyExclusive("html", "json")
	_ = cmd.MarkFlagRequired("sbom")

	return cmd
}

func runGet(opts *GetOptions) error {
	if opts.config.JiraToken == "" {
		_, _ = fmt.Fprintln(os.Stderr, "Please provide a Jira token")
		os.Exit(1)
	}

	f, err := os.Open(opts.SBom)
	if err != nil {
		_, _ = fmt.Fprintln(os.Stderr, "Could not access sbom file")
		os.Exit(1)
	}
	sBom, _ := sbom.GetSBomFromFile(f)

	if opts.json {
		results, err := acveh.GetCVEIssues(sBom, opts.config)
		if err != nil {
			_, _ = fmt.Fprintln(os.Stderr, "Error while getting cves")
			os.Exit(1)
		}
		jsonResults, _ := json.MarshalIndent(results, "", "\t")
		fmt.Println(string(jsonResults))
	} else if opts.html {
		result, err := acveh.GetCVEIssues(sBom, opts.config)
		if err != nil {
			return err
		}
		err = result.PrintAsHtml("result.html") // "" means stdout
		if err != nil {
			return err
		}
	} else {
		result, err := acveh.GetCVEIssues(sBom, opts.config)
		if err == nil {
			result.Print()
		}
	}

	return nil
}
